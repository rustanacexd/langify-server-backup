"""
Django settings for langify project.

Generated by 'django-admin startproject' using Django 2.0b1.

For more information on this file, see
https://docs.djangoproject.com/en/dev/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/dev/ref/settings/

For depoyment, see
https://docs.djangoproject.com/en/dev/howto/deployment/checklist/
"""

import json
import os
from configparser import RawConfigParser
from datetime import datetime, timezone
from distutils.util import strtobool

import plotly

import frontend_urls

# Version


def get_version():
    path = os.path.join(
        os.path.dirname(
            os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
        ),
        'package.json',
    )
    try:
        released = datetime.fromtimestamp(os.path.getmtime(path), timezone.utc)
    except FileNotFoundError:
        date = os.getenv('BUILT_DATE')
        if date:
            # Python 3.7: datetime.fromisoformat()
            released = datetime.strptime(date, '%Y-%m-%dT%H:%M:%SZ')
            released = released.replace(tzinfo=timezone.utc)
        else:
            released = datetime.now(timezone.utc)
        version = os.getenv('LANGIFY_VERSION') or 'NaN'
    else:
        with open(path) as f:
            version = json.load(f)['version']
    return version, released


VERSION, RELEASED = get_version()


# Paths, config and environment

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config = RawConfigParser()
config_path = os.path.join(BASE_DIR, 'config.ini')
config.read(config_path)

DEBUG = strtobool(os.getenv('DEBUG', 'false'))

TEST = False

SITE_ID = 1

if os.getenv('DOCKER'):
    DEBUG_TOOLBAR_CONFIG = {'SHOW_TOOLBAR_CALLBACK': lambda request: DEBUG}

# Application definition

INSTALLED_APPS = [
    'misc',
    'panta',
    'path',
    'white_estate',
    'style_guide',
    'django.contrib.admin',
    # contenttypes should be in front of auth
    # see https://code.djangoproject.com/ticket/10827#comment:30
    'django.contrib.contenttypes',
    'django.contrib.auth',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.postgres',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'cachalot',
    'rest_framework',
    'guardian',
    'django_filters',
    'simple_history',
    'imagekit',
    'rest_auth',
    'rest_auth.registration',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'django_countries',
    'drf_yasg',
    'django_celery_beat',
    'health_check',
    'health_check.db',
    'health_check.cache',
    'health_check.storage',
    'health_check.contrib.celery',
    'rest_framework_recaptcha',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'simple_history.middleware.HistoryRequestMiddleware',
]

ROOT_URLCONF = 'langify.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ]
        },
    }
]

STATICFILES_DIRS = [
    (
        # Plot.ly files
        'plotly',
        os.path.join(plotly.__path__[0], 'package_data'),
    )
]

WSGI_APPLICATION = 'langify.wsgi.application'


# Database
# https://docs.djangoproject.com/en/dev/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': config.get('database', 'NAME', fallback='ellen4all'),
        'USER': config.get('database', 'USER', fallback='postgres'),
        'PASSWORD': config.get('database', 'PASSWORD', fallback='postgres'),
        'HOST': config.get('database', 'HOST', fallback='db'),
        'PORT': config.get('database', 'PORT', fallback=5432),
    }
}


# Cache

# Please, make sure to have redis enabled in production!
# Otherwise, locmem is used.

# Other interesting backends:

# Very fast in reading:
# http://www.grantjenks.com/docs/diskcache/djangocache-benchmarks.html

# To get a table name: <Model>._meta.db_table

CACHALOT_UNCACHABLE_TABLES = (
    'django_migrations',
    'django_session',
    'health_check_db_testmodel',
    'panta_historicaltranslatedsegment',
    'panta_segmentdraft',
    'panta_translatedsegment',
    'panta_vote',
)

REDIS_HOST = config.get('redis', 'HOST', fallback='redis')

REDIS_CACHE_PORT = config.get('redis', 'CACHE_PORT', fallback=6379)

REDIS_PASSWORD = config.get('redis', 'PASSWORD', fallback='')

if REDIS_CACHE_PORT:
    CACHES = {
        'default': {
            'BACKEND': 'django_redis.cache.RedisCache',
            'LOCATION': f'redis://{REDIS_HOST}:{REDIS_CACHE_PORT}/1',
            'OPTIONS': {
                'CLIENT_CLASS': 'django_redis.client.DefaultClient',
                'PASSWORD': REDIS_PASSWORD,
            },
        }
    }


# Celery

CELERY_BEAT_SCHEDULER = 'django_celery_beat.schedulers:DatabaseScheduler'

CELERY_BROKER_TRANSPORT_OPTIONS = {
    # This has to be longer than the longest task (ETA) runs
    'visibility_timeout': 3600,  # 1 h, default
    # The next two values will be the default in the future and can then be
    # removed from here (http://docs.celeryproject.org/en/latest/
    # getting-started/brokers/redis.html#caveats)
    'fanout_prefix': True,
    'fanout_patterns': True,
}

REDIS_PERSISTENT_PORT = config.get('redis', 'PERSISTENT_PORT', fallback=6379)

REDIS_PERSISTENT_DATABASE = 0

CELERY_RESULT_BACKEND = (
    f'redis://redis:{REDIS_PASSWORD}@{REDIS_HOST}:{REDIS_CACHE_PORT}/1'
)

# https://medium.com/@taylorhughes/
# three-quick-tips-from-two-years-with-celery-c05ff9d7f9eb

CELERYD_TASK_SOFT_TIME_LIMIT = 60


# Email

DEFAULT_FROM_EMAIL = config.get(
    'email',
    'DEFAULT_FROM_EMAIL',
    fallback=os.getenv('DEFAULT_FROM_EMAIL', '').strip('\'"'),
)

DEFAULT_TO_EMAILS = config.get(
    'email', 'DEFAULT_TO_EMAILS', fallback=os.getenv('DEFAULT_TO_EMAILS')
).split()

EMAIL_HOST = config.get('email', 'HOST', fallback=os.getenv('EMAIL_HOST'))

EMAIL_HOST_PASSWORD = config.get(
    'email', 'HOST_PASSWORD', fallback=os.getenv('EMAIL_PASSWORD')
)

EMAIL_HOST_USER = config.get(
    'email', 'HOST_USER', fallback=os.getenv('EMAIL_USER')
)

EMAIL_PORT = 587

EMAIL_SUBJECT_PREFIX = 'Langify '

EMAIL_USE_TLS = True

SERVER_EMAIL = config.get(
    'email', 'DEFAULT_FROM_EMAIL', fallback=os.getenv('DEFAULT_FROM_EMAIL')
)


# Slack

SLACK_KEY = config.get('secrets', 'SLACK_KEY', fallback=os.getenv('SLACK_KEY'))


# Authentication

AUTH_USER_MODEL = 'path.User'

AUTHENTICATION_BACKENDS = (
    'allauth.account.auth_backends.AuthenticationBackend',
    'django.contrib.auth.backends.ModelBackend',
    'guardian.backends.ObjectPermissionBackend',
)

LOGIN_URL = '/{}'.format(frontend_urls.LOGIN)

SESSION_COOKIE_AGE = 365 * 24 * 60 * 60  # = one year

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'

SESSION_CACHE_ALIAS = 'default'


# Allauth

ACCOUNT_ADAPTER = 'path.adapter.RestAdapter'

ACCOUNT_AUTHENTICATION_METHOD = 'username_email'

ACCOUNT_EMAIL_REQUIRED = True

ACCOUNT_EMAIL_VERIFICATION = 'mandatory'

ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'

ACCOUNT_LOGIN_ON_EMAIL_CONFIRMATION = True

ACCOUNT_USERNAME_MIN_LENGTH = 4


# Rest auth

REST_AUTH_SERIALIZERS = {
    'LOGIN_SERIALIZER': 'path.api.serializers.SimpleLoginSerializer',
    'PASSWORD_RESET_CONFIRM_SERIALIZER': (
        'path.api.serializers.PasswordResetConfirmSerializer'
    ),
}

REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'path.api.serializers.SignupSerializer'
}

# We don't use tokens
REST_AUTH_TOKEN_CREATOR = lambda t, u, s: type('NotImplemented', (), {})

OLD_PASSWORD_FIELD_ENABLED = True

LOGOUT_ON_PASSWORD_CHANGE = False


# Password validation
# https://docs.djangoproject.com/en/dev/ref/settings/#auth-password-validators

password_validation = 'django.contrib.auth.password_validation.'

AUTH_PASSWORD_VALIDATORS = [
    {'NAME': password_validation + 'UserAttributeSimilarityValidator'},
    {'NAME': password_validation + 'MinimumLengthValidator'},
    {'NAME': password_validation + 'CommonPasswordValidator'},
    {'NAME': password_validation + 'NumericPasswordValidator'},
]


# Security

SECRET_KEY = config.get(
    'secrets', 'SECRET_KEY', fallback=os.getenv('SECRET_KEY')
)

ALLOWED_HOSTS = tuple(
    config.get('environment', 'ALLOWED_HOSTS', fallback='localhost').split()
)

CSRF_TRUSTED_ORIGINS = config.get(
    'environment',
    'CSRF_TRUSTED_ORIGINS',
    fallback=os.getenv('CSRF_TRUSTED_ORIGINS') or '',
).split()

PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
    'django.contrib.auth.hashers.BCryptSHA256PasswordHasher',
    'django.contrib.auth.hashers.BCryptPasswordHasher',
]

if not DEBUG:
    SESSION_COOKIE_SECURE = True
    CSRF_COOKIE_SECURE = True

X_FRAME_OPTIONS = 'DENY'


# Internationalization
# https://docs.djangoproject.com/en/dev/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True

LANGUAGES_BIDI = ['ar', 'ckb', 'fa', 'he', 'ur']


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/dev/howto/static-files/

STATIC_URL = '/apps/'

STATIC_ROOT = os.path.join(BASE_DIR, 'static/apps')

# Make sure that this directory is writable by the Web server's user account
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

MEDIA_URL = '/media/'

IMAGEKIT_CACHEFILE_DIR = 'cache/images'

IMAGEKIT_SPEC_CACHEFILE_NAMER = 'path.thumbnails.source_name_as_path_with_sizes'

# Sendfile

SENDFILE_BACKEND = 'sendfile.backends.nginx'

SENDFILE_ROOT = os.path.join(BASE_DIR, 'smedia')

SENDFILE_URL = '/smedia/'


# Rest framework

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'misc.authentication.SessionAuthentication',
        'misc.authentication.BearerTokenAuthentication',
    ),
    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',
    ),
    'DEFAULT_THROTTLE_RATES': {'auth': '100/hour'},
    'DEFAULT_RENDERER_CLASSES': [
        'djangorestframework_camel_case.render.CamelCaseJSONRenderer'
    ],
    'DEFAULT_PARSER_CLASSES': (
        'djangorestframework_camel_case.parser.CamelCaseJSONParser',
    ),
    'DEFAULT_PAGINATION_CLASS': (
        'rest_framework.pagination.LimitOffsetPagination'
    ),
    'PAGE_SIZE': 50,
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'JSON_UNDERSCOREIZE': {'no_underscore_before_number': True},
}


if DEBUG:
    REST_FRAMEWORK['DEFAULT_RENDERER_CLASSES'].append(
        'rest_framework.renderers.BrowsableAPIRenderer'
    )


# Sentry

SENTRY_DSN = config.get(
    'secrets', 'SENTRY_DSN', fallback=os.getenv('SENTRY_DSN')
)

RAVEN_CONFIG = {
    'dsn': SENTRY_DSN,
    'release': VERSION,
    'sanitize_keys': ('email', 'key'),
    'processors': (
        'raven.processors.SanitizeKeysProcessor',
        'raven.processors.SanitizePasswordsProcessor',
    ),
}

if SENTRY_DSN:
    INSTALLED_APPS += ['raven.contrib.django.raven_compat']


# Logging

# TODO Compare with Django 2.0
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': (
                '%(levelname)s %(asctime)s %(module)s '
                '%(process)d %(thread)d %(message)s'
            )
        },
        'level': {'format': '%(levelname)s %(message)s'},
    },
    'filters': {
        'require_debug_false': {'()': 'django.utils.log.RequireDebugFalse'},
        'require_debug_true': {'()': 'django.utils.log.RequireDebugTrue'},
        'require_sentry_dsn': {'()': 'misc.RequireSentryDSN'},
        'require_test_false': {'()': 'misc.RequireTestFalse'},
    },
    'handlers': {
        'console': {
            'level': 'DEBUG',
            'filters': ['require_test_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'console_debug_true': {
            'level': 'DEBUG',
            'filters': ['require_debug_true', 'require_test_false'],
            'class': 'logging.StreamHandler',
            'formatter': 'level',
        },
        'file': {
            'level': 'INFO',
            'filters': ['require_debug_false', 'require_test_false'],
            'class': 'logging.handlers.TimedRotatingFileHandler',
            'filename': os.path.join(
                config.get('environment', 'LOG_PATH', fallback='logs'),
                'django_auth.log',
            ),
            'when': 'W0',
            'backupCount': 52 / 2,
            'formatter': 'level',
        },
        'sentry': {
            # To capture more than ERROR, change to WARNING, INFO, etc.
            'level': 'ERROR',
            'filter': ['require_sentry_dsn', 'require_test_false'],
            'class': (
                'raven.contrib.django.raven_compat.handlers.SentryHandler'
            ),
            'tags': {'custom-tag': 'x'},
        },
    },
    'loggers': {
        'path.signals': {
            'handlers': ['console_debug_true', 'file'],
            'level': 'INFO',
            'propagate': True,
        },
        'django.db.backends': {
            'level': 'ERROR',
            'handlers': ['console'],
            'propagate': False,
        },
        'raven': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
        'sentry.errors': {
            'level': 'DEBUG',
            'handlers': ['console'],
            'propagate': False,
        },
    },
    'root': {'level': 'WARNING', 'handlers': ['console', 'sentry']},
}


# White Estate

EGW_CLIENT_ID = config.get(
    'egw', 'CLIENT_ID', fallback=os.getenv('EGW_CLIENT_ID')
)

EGW_CLIENT_SECRET = config.get(
    'egw', 'CLIENT_SECRET', fallback=os.getenv('EGW_CLIENT_SECRET')
)


# Mailjet

MAILJET_PUBLIC_KEY = config.get(
    'mailjet', 'PUBLIC_KEY', fallback=os.getenv('MAILJET_PUBLIC_KEY')
)

MAILJET_SECRET_KEY = config.get(
    'mailjet', 'SECRET_KEY', fallback=os.getenv('MAILJET_SECRET_KEY')
)


# DeepL

DEEPL_KEY = config.get('secrets', 'DEEPL_KEY', fallback=os.getenv('DEEPL_KEY'))


# Newsletter2Go

NL2GO_USERNAME = config.get(
    'newsletter2go', 'USERNAME', fallback=os.getenv('NL2GO_USERNAME')
)
NL2GO_PASSWORD = config.get(
    'newsletter2go', 'PASSWORD', fallback=os.getenv('NL2GO_PASSWORD')
)
NL2GO_AUTH_KEY = config.get(
    'newsletter2go', 'AUTH_KEY', fallback=os.getenv('NL2GO_AUTH_KEY')
)


# Debugging & testing

if DEBUG:
    INSTALLED_APPS += ['django_extensions', 'debug_toolbar', 'crispy_forms']

    # DATABASES.update({'e2e_tests': {
    #     'ENGINE': config.get('database', 'ENGINE'),
    #     'NAME': '{}_e2e_tests'.format(config.get('database', 'NAME')),
    #     'USER': config.get('database', 'USER'),
    #     'PASSWORD': config.get('database', 'PASSWORD'),
    #     'HOST': config.get('database', 'HOST'),
    #     'PORT': config.get('database', 'PORT'),
    # }})

    DATABASE_ROUTERS = ['langify.routers.E2ETestsRouter']

    MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')

    INTERNAL_IPS = ['127.0.0.1']

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

    SENDFILE_BACKEND = 'sendfile.backends.development'

    DEBUG_TOOLBAR_PANELS = (
        'debug_toolbar.panels.versions.VersionsPanel',
        'debug_toolbar.panels.timer.TimerPanel',
        'debug_toolbar.panels.settings.SettingsPanel',
        'debug_toolbar.panels.headers.HeadersPanel',
        'debug_toolbar.panels.request.RequestPanel',
        'debug_toolbar.panels.sql.SQLPanel',
        'debug_toolbar.panels.staticfiles.StaticFilesPanel',
        'debug_toolbar.panels.templates.TemplatesPanel',
        'debug_toolbar.panels.cache.CachePanel',
        'cachalot.panels.CachalotPanel',
        'debug_toolbar.panels.signals.SignalsPanel',
        'debug_toolbar.panels.logging.LoggingPanel',
        'debug_toolbar.panels.redirects.RedirectsPanel',
    )

    # drf-yasg

    LOGOUT_URL = '/{}'.format(frontend_urls.LOGOUT)

    SWAGGER_SETTINGS = {
        'SECURITY_DEFINITIONS': {
            'session': {
                'type': 'session',
                'description': (
                    'Authentication via session cookies. Unauthenticated users '
                    'get a `401 Unauthenticated` response.\n\nEndpoints that '
                    'require authentication have a back link.'
                ),
            }
        },
        'TAGS_SORTER': 'alpha',
    }

    REDOC_SETTINGS = {
        # 'LAZY_RENDERING': True,
        # 'EXPAND_RESPONSES': '200,201',
        'PATH_IN_MIDDLE': True
    }

    # Jupyter notebook

    if os.getenv('DOCKER'):
        NOTEBOOK_ARGUMENTS = ['--ip', '0.0.0.0', '--allow-root', '--no-browser']

    # # Create E2E tests database
    # from psycopg2 import connect, ProgrammingError
    # from psycopg2.extensions import ISOLATION_LEVEL_AUTOCOMMIT

    # db_settings = DATABASES['e2e_tests']
    # connection = connect(
    #     dbname='postgres',
    #     user=db_settings['USER'],
    #     host=db_settings['HOST'],
    #     password=db_settings['PASSWORD'],
    # )
    # connection.set_isolation_level(ISOLATION_LEVEL_AUTOCOMMIT)
    # curser = connection.cursor()
    # try:
    #     curser.execute('CREATE DATABASE {}'.format(db_settings['NAME']))
    # except ProgrammingError:
    #     pass
    # curser.close()
    # connection.close()


DRF_RECAPTCHA_SECRET_KEY = config.get(
    'captcha',
    'DRF_RECAPTCHA_SECRET_KEY',
    fallback=os.getenv('DRF_RECAPTCHA_SECRET_KEY'),
)
